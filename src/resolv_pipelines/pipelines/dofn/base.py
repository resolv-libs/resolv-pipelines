""" This module defines abstract base classes for creating configurable DoFns (Do Functions) in Apache Beam.

A configurable DoFn allows customization of its behavior through configuration parameters,
making it easier to adapt the behavior of data processing pipelines without modifying the code.

Classes:
    DebugOutputTypeEnum: Enumeration defining types of debug output.
    DoFnDebugConfig: Configuration class for debug output settings.
    ConfigurableDoFn: Abstract base class for a configurable DoFn in Apache Beam.

Usage:
    - Inherit from ConfigurableDoFn to create custom DoFns.
    - Implement abstract methods name(), namespace(), default_config(), and _init_statistics()
      to define behavior and configurations specific to the DoFn.
    - Override setup() method for any additional setup logic required by the custom DoFn.

Example:
    class MyCustomDoFn(ConfigurableDoFn):
        def name(self) -> str:
            return "MyCustomDoFn"

        def namespace(self) -> str:
            return "my_namespace"

        def default_config(self) -> Dict[str, Any]:
            return {
                "param1": 100,
                "param2": "default_value"
            }

        def _init_statistics(self) -> Dict[str, Any]:
            return {
                "stat_name": beam_metrics.counter(self.namespace(), 'stat_name')
            }

        def process(self, element):
            # Custom processing logic here
            pass

"""
import random
import string

from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum
from typing import Dict, Any, List

import apache_beam as beam
import tensorflow as tf

from resolv_pipelines.canonical import CanonicalFormat


class DebugOutputTypeEnum(Enum):
    """
    Enumeration defining types of debug output.
    """

    JSON = "json"
    SOURCE = "source"


@dataclass
class DoFnDebugConfig:
    """
    Configuration class for debug output settings.

    Attributes:
        enabled (bool): Flag indicating whether debug output is enabled.
        output_path (str): Path to write debug output.
        output_type (DebugOutputTypeEnum): Type of debug output (JSON or SOURCE).
        output_file_pattern (str): File pattern to match against an id in order to decide whether to write the debug
            output file.
    """

    enabled: bool = False
    output_path: str = None
    output_type: DebugOutputTypeEnum = DebugOutputTypeEnum.SOURCE
    output_file_pattern: str = None


class ConfigurableDoFn(ABC, beam.DoFn):
    """
    Abstract base class for a configurable DoFn (Apache Beam).

    This class provides a base for creating Beam DoFns with configurable behavior.

    Attributes:
        _config (Dict[str, Any]): Configuration for the DoFn.
        _debug_config (DoFnDebugConfig): Debug configuration for the DoFn.
        _statistics (Dict[str, Any]): Statistics collected by the DoFn.
        _worker_id (str): ID of the worker running the DoFn. It is generated by randomly pick 8 characters from the
            alphabet.
        _processed_elements (int): Count of elements processed by the DoFn.

    Methods:
        setup(): Setup method to initialize necessary attributes.
        statistics(): Getter property for accessing statistics collected by the DoFn.
        name() -> str: Abstract method to get the name of the DoFn.
        namespace() -> str: Abstract method to get the namespace of the DoFn.
        default_config() -> Dict[str, Any]: Abstract method to define the default configuration for the DoFn.
        _init_statistics() -> Dict[str, Any]: Internal abstract method to initialize statistics for the DoFn.
    """

    def __init__(self, config: Dict[str, Any] = None, debug_config: DoFnDebugConfig = None):
        """
        Constructor for ConfigurableDoFn.

        Args:
            config (Dict[str, Any], optional): Configuration for the DoFn that will be merged to default_config.
                Defaults to None.
            debug_config (DoFnDebugConfig, optional): Debug configuration for the DoFn. Defaults to None.
        """
        super(ConfigurableDoFn, self).__init__()
        self._config = self.default_config()
        if config is not None:
            self._config.update(config)
        self._debug_config = debug_config
        self._statistics = None
        self._worker_id = None
        self._processed_elements = None

    def setup(self):
        """
        Setup method to initialize necessary attributes.
        """
        self._processed_elements = 0
        self._statistics = self._init_statistics()
        alphabet = string.ascii_lowercase + string.digits
        self._worker_id = ''.join(random.choices(alphabet, k=8))

    @property
    def statistics(self) -> Dict[str, Any]:
        """
        Getter property for accessing statistics collected by the DoFn.

        Returns:
            Dict[str, Any]: Statistics collected by the DoFn.
        """
        return self._statistics

    @staticmethod
    @abstractmethod
    def name() -> str:
        """
        Abstract method to get the name of the DoFn.

        Returns:
            str: Name of the DoFn.
        """
        pass

    @staticmethod
    @abstractmethod
    def namespace() -> str:
        """
        Abstract method to get the namespace of the DoFn.

        Returns:
            str: Namespace of the DoFn.
        """
        pass

    @staticmethod
    @abstractmethod
    def default_config() -> Dict[str, Any]:
        """
        Abstract method to get the default configuration for the DoFn.

        Returns:
            Dict[str, Any]: Default configuration for the DoFn.
        """
        pass

    @abstractmethod
    def _init_statistics(self) -> Dict[str, Any]:
        """
        Abstract method to initialize statistics for the DoFn.

        Returns:
            Dict[str, Any]: Initialized statistics for the DoFn.
        """
        pass


@beam.typehints.with_input_types(CanonicalFormat)
@beam.typehints.with_output_types(tf.train.Example)
class RepresentationDoFn(ABC, beam.DoFn):

    def __init__(self, keep_attributes: bool = False):
        super(RepresentationDoFn, self).__init__()
        self._keep_attributes = keep_attributes

    @property
    @abstractmethod
    def attributes_field_name(self) -> str:
        pass

    @property
    @abstractmethod
    def attribute_fields(self) -> List[str]:
        pass

    @abstractmethod
    @property
    def _process_internal(self) -> Callable:
        pass

    @abstractmethod
    def _process_internal(self, canonical_format: CanonicalFormat) -> tf.train.Example:
        pass

    def process(self, canonical_format: CanonicalFormat, *args, **kwargs):
        sequence_example = self._process_internal(canonical_format)
        if self._keep_attributes:
            context = tf.train.Features(feature=self._get_attributes_features(canonical_format))
            sequence_example.context.CopyFrom(context)
        yield sequence_example

    def _get_attributes_features(self, canonical_format: CanonicalFormat) -> Dict[str, tf.train.Feature]:
        field_values = {}
        sequence_attributes = getattr(canonical_format, self.attributes_field_name)
        for attribute_field in self.attribute_fields:
            field_value = getattr(sequence_attributes, attribute_field)
            if not field_value:
                field_value = tf.keras.backend.epsilon()
            field_values[attribute_field] = tf.train.Feature(float_list=tf.train.FloatList(value=[field_value]))
        return field_values
